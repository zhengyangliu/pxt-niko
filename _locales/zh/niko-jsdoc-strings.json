{
  "dht11": "A driver of DHT11 in MakeCode\r\n@author ArthurZheng",
  "dht11.humidity": "calculate temperature from lastest data \r\n@return {number} 255 error, others ok",
  "dht11.read": "read data from dht11\r\n@return {number} 0 ok, 1 check sum failed",
  "dht11.setPin": "Set pin at which the DHT data line is connected\r\n@param {DigitalPin} pin - pin at which the DHT data line is connected, eg: DigitalPin.P0",
  "dht11.temperature": "calculate temperature from lastest data \r\n@return {number} 255 error, others ok",
  "niko": "StormScience Niko robot package\r\n@author ArthurZheng",
  "niko.brakeNiko": "break niko",
  "niko.ps2ButtonAnalog": "calculate ps2 controller's digital button's state.\r\n@param {DigitalButton} button - digital button name, eg: ps2.DigitalButton.Select\r\n@return {number} digital button's state",
  "niko.ps2ButtonDigital": "calculate ps2 controller's digital button's state.\r\n@param {DigitalButton} button - digital button name, eg: ps2.DigitalButton.Select\r\n@return {boolean} digital button's state",
  "niko.readPS2": "read data from ps2 controller",
  "niko.setMachineGunState": "set machine gun state\r\n@param {boolean} state - true fire, false hold fire",
  "niko.setMotorSpeed": "set motor speed\r\n@param {Motor} m - the motor want to sets\r\n@param {number} speed - run speed",
  "niko.setNikoGo": "set niko go\r\n@param {Directivon} dir - directivon to go\r\n@param {number} speed - go speed",
  "niko.setServo": "set servo\r\n@param {AnalogPin} pin - servo pin \r\n@param {number} angle - servo angle",
  "pcf8574x": "A driver of PCF8574 and PCF8574A in MakeCode.\r\n@author ArthurZheng",
  "pcf8574x.Mode": "PCF8574 IO mode\r\nCource the pin of PCF8574 is open-drain interrupt output, so input is same with out high",
  "pcf8574x.configAddress": "Configure address of PCF8574, should run at first.\r\n@param {number} address - 7-bit address of PCF8574, eg: 0x20\r\n@note The address is 7 bit, R/W bit will automatically add. According to the difference of A0, A1, A2,\r\nthe address range of PCF8574 is 0x20 ~ 0x27, and PCF8574A is 0x38 ~ 0x3f",
  "pcf8574x.readPinState": "Read PCF8574 io input data by pin\r\n@param {IO} pin - PCF8574 pins eg: IO.P0\r\n@return {boolean} The pin state",
  "pcf8574x.readState": "Read PCF8574 io input data\r\n@return {number} PCF8574 io input data",
  "pcf8574x.writeMode": "Configure PCF8574 io mode\r\n@param {number} data - 8-bit config, eg: 0x00",
  "pcf8574x.writePinMode": "Configure PCF8574 io mode by pin\r\n@param {IO} pin - PCF8574 pins eg: IO.P0\r\n@param {Mode} mode - Out low, out high or input, eg: Mode.Low",
  "ps2": "A driver of PS2 wireless controller in MakeCode.\r\n@abstract This program is port from https://github.com/Lynxmotion/Arduino-PS2X, It's a lite version of Arduino-PS2X,\r\ncan only be used in communicate with 2.4G PS2 wireless controller, other ps2 gamepads are not supported. The wareform \r\ncan be referenced from https://store.curiousinventor.com/guides/PS2.\r\n@author ArthurZheng",
  "ps2.buttonAnalog": "return ps2 controller's analog button's value.\r\n@param {AnalogButton} button - analog button name, eg: ps2.AnalogButton.RX\r\n@return {number} analog button's value, range: 0~255, idle: 128",
  "ps2.buttonDigital": "return ps2 controller's digital button's state.\r\n@param {DigitalButton} button - digital button name, eg: ps2.DigitalButton.Select\r\n@return {boolean} digital button's state",
  "ps2.initGamepad": "Initialize ps2 controller and set pins, should run at first.\r\n@param {DigitalPin} dout - DO pin name, eg: DigitalPin.P15\r\n@param {DigitalPin} din - DI pin name, eg: DigitalPin.P14\r\n@param {DigitalPin} clk - CLK pin name, eg: DigitalPin.P13\r\n@param {DigitalPin} cs - CS pin name, eg: DigitalPin.P16\r\n@return {number} 0 no error, 1 cannot communicat with wireless recreceiver, 2 cannot set wireless receiver mode",
  "ps2.readGamepad": "Send and recive data. recive data is store in ps2Data and btData\r\n@param {number} byte - the data to send , eg: 0x00\r\n@return {number} 0 no error, 1 error",
  "rgbled": "A driver for WS2812B programmable LEDs in MakeCode\n@note This package disables BLE as the real time requirements of the WS2812 conflict with the BLE stack.\n@author ArthurZheng",
  "rgbled.clear": "clear buffer",
  "rgbled.configStrip": "configure led strip data pin and length\n@param {DigitalPin} pin - pin at which the WS2812B data line is connected\n@param {number} len - the number of led in the strip",
  "rgbled.setPixelColor": "configure the led by color\n@param {number} offset - sequence number of the led\n@param {Color} color - color",
  "rgbled.setPixelRGB": "configure the led by RGB value\n@param {number} offset - sequence number of the led\n@param {number} red - the brightness of red\n@param {number} green - the brightness of green\n@param {number} blue - the brightness of blue",
  "rgbled.show": "show the set color"
}